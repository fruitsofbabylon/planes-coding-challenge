{"version":3,"sources":["card/Card.js","card/Stack.js","Data.js","Output.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","draggable","src","img","alt","name","Stack","children","data","doubles","id","results","Output","rows","map","result","find","double","App","state","currentIndex","currentId","this","setState","console","log","length","cards","slice","reverse","index","key","currentPosition","displayTable","onDrop","onDragOver","e","preventDefault","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAYeA,MATf,SAAcC,GACV,OACI,yBAAKC,UAAU,OAAOC,UAAWF,EAAME,WACnC,yBAAKD,UAAU,SAAQ,yBAAKE,IAAKH,EAAMI,IAAKC,IAAI,SAChD,2BAAIL,EAAMM,Q,MCIPC,MARf,SAAeP,GACX,OACI,yBAAKC,UAAU,SACVD,EAAMQ,WCNNC,EAAO,CAChBC,QAAS,CAAC,CACNC,GAAI,EACJL,KAAM,aACNF,IAAK,mBACN,CACCO,GAAI,EACJL,KAAM,UACNF,IAAK,gBACN,CACCO,GAAI,EACJL,KAAM,iBACNF,IAAK,eACN,CACCO,GAAI,EACJL,KAAM,SACNF,IAAK,cACN,CACCO,GAAI,EACJL,KAAM,SACNF,IAAK,eACN,CACCO,GAAI,EACJL,KAAM,SACNF,IAAK,iBAIFQ,EAAU,GCRNC,MAjBf,SAAgBb,GAEZ,IAAIc,EAAOd,EAAMY,QAAQG,KAAI,SAACC,EAAQL,GAAT,OACzB,4BACI,4BAAKF,EAAKC,QAAQO,MAAK,SAACC,GAAD,OAAYA,EAAOP,IAAMA,KAAIL,MACpD,gCAAMU,EAAS,MAAQ,KAAvB,SAGR,OACI,2BAAOL,GAAG,UACN,+BACKG,KCwCFK,G,uNA7CbC,MAAQ,CACNC,aAAc,G,sEAGTL,GACL,IAAMM,EAAYb,EAAKC,QAAQa,KAAKH,MAAMC,cAAcV,GACxDC,EAAQU,GAAaN,EACrBO,KAAKC,SAAS,CAAEH,aAAcE,KAAKH,MAAMC,aAAe,IACxDI,QAAQC,IAAId,K,wCAIZ,OAAOH,EAAKC,QAAQiB,OAAS,EAAIJ,KAAKH,MAAMC,e,+BAGpC,IAAD,OACDO,EAAQnB,EAAKC,QAAQmB,MAAMN,KAAKH,MAAMC,cAAcS,UAAUf,KAAI,SAACG,EAAQa,GAAT,OACtE,kBAAC,EAAD,CACEzB,KAAMY,EAAOZ,KACbF,IAAKc,EAAOd,IACZ4B,IAAKd,EAAOP,GACZT,UAAW6B,GAAS,EAAKE,uBAIvBC,EAAeX,KAAKH,MAAMC,cAAgBZ,EAAKC,QAAQiB,OAE7D,OACE,yBAAK1B,UAAU,OACb,yBAAKU,GAAG,OAAOR,IAAI,WAAWE,IAAI,SAClC,sDACA,yBAAKM,GAAG,KAAKwB,OAAQ,kBAAM,EAAKA,QAAO,IAAQC,WAAa,SAACC,GAAOA,EAAEC,oBACrEJ,EAAe,kBAAC,EAAD,CAAQtB,QAASA,IAAa,kBAAC,EAAD,SAASgB,EAAT,KAC9C,yBAAKjB,GAAG,MAAMwB,OAAQ,kBAAM,EAAKA,QAAO,IAAOC,WAAa,SAACC,GAAOA,EAAEC,qBACnEJ,GACD,yBAAKjC,UAAU,SACb,yBAAKE,IAAI,aAAaE,IAAI,YAC1B,yBAAKF,IAAI,cAAcE,IAAI,mB,GAtCrBkC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7c49397.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    return(\n        <div className=\"Card\" draggable={props.draggable}>\n            <div className=\"Image\"><img src={props.img} alt=\"Cat\"></img></div>\n            <p>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport './Stack.css';\n\nfunction Stack(props) {\n    return(\n        <div className=\"Stack\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Stack;","export const data = {\n    doubles: [{\n        id: 1,\n        name: \"Budderball\",\n        img: \"budderball.webp\"\n    }, {\n        id: 2,\n        name: \"Rosebud\",\n        img: \"rosebud.webp\"\n    }, {\n        id: 3,\n        name: \"Captain Canine\",\n        img: \"canine.webp\"\n    }, {\n        id: 4,\n        name: \"B-Dawg\",\n        img: \"bdawg.webp\"\n    }, {\n        id: 5,\n        name: \"Buddha\",\n        img: \"buddha.webp\"\n    }, {\n        id: 6,\n        name: \"Mudbud\",\n        img: \"mudbud.webp\"\n    } ]\n}\n\nexport let results = []\n","import React from 'react';\nimport {data} from './Data.js';\n\nfunction Output(props) {\n\n    let rows = props.results.map((result, id) => \n        <tr>\n            <td>{data.doubles.find((double) => double.id == id).name}</td>\n            <td> {result ? \"yes\" : \"no\"} </td>\n        </tr>\n    ) \n    return (\n        <table id=\"center\">\n            <tbody>\n                {rows}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Output;","import React from 'react';\nimport Card from './card/Card.js';\nimport Stack from './card/Stack.js';\nimport { data, results } from './Data.js';\nimport Output from './Output.js';\nimport './App.css';\nimport './Output.css';\n\nclass App extends React.Component {\n  state = {\n    currentIndex: 0\n  }\n\n  onDrop(result) {\n    const currentId = data.doubles[this.state.currentIndex].id\n    results[currentId] = result\n    this.setState({ currentIndex: this.state.currentIndex + 1 })\n    console.log(results)\n  }\n\n  currentPosition() {\n    return data.doubles.length - 1 - this.state.currentIndex\n  }\n\n  render() {\n    const cards = data.doubles.slice(this.state.currentIndex).reverse().map((double, index) =>\n      <Card \n        name={double.name} \n        img={double.img}\n        key={double.id}\n        draggable={index == this.currentPosition()}\n      />\n    );\n\n    const displayTable = this.state.currentIndex >= data.doubles.length\n\n    return (\n      <div className=\"App\">\n        <img id=\"Logo\" src=\"logo.png\" alt=\"Logo\"></img>\n        <p>Position: Buddie Double</p>\n        <div id=\"no\" onDrop={() => this.onDrop(false)} onDragOver={ (e) => {e.preventDefault()}}/>\n        {displayTable ? <Output results={results}/> : <Stack> {cards} </Stack>}\n        <div id=\"yes\" onDrop={() => this.onDrop(true)} onDragOver={ (e) => {e.preventDefault()}}/>\n        { !displayTable && \n          <div className=\"icons\">\n            <img src=\"cancel.png\" alt=\"NO icon\"></img>\n            <img src=\"checked.png\" alt=\"YES icon\"></img>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}